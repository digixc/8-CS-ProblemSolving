#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil html-style:nil 

#+TITLE: Selection
#+AUTHOR: James Brown

#+BEGIN_EXPORt html
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/digixc/8-CS-ProblemSolving">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>
      <li><a href="7_Lesson.html">Week7</a></li>
      <li><a href="homework.html">Homework</a></li>

    </ul>
  </div>
<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>
#+END_EXPORT
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:
* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing *Algorithms* learning strand, specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
+ learn how to represent *algorithms* using *flowchart*
+ Understand how *abstraction* can help solving complex problems
** Developing *Programming and Development* learning strand, specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
+ implement solutions using *selection* and *repetition*
+ develop further understanding that programming bridges the gap between algorithmic solutions and computers
* Selection
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It - Selection
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

- Last lesson we looked at how *sequencing* is used to put our solution to a problem in the correct order to solve it.
- Today we are going to continue to use Flowol to use *selection* to decide what to do in certain situations.
- A diamond box is used when a *decision* needs to be made, a decision is *selecting* what to do. 
- This might include comparing the input states or comparing a count to a set limit. The outcome of the decision must be either yes or no.

[[./img/decisionblock.gif]]

** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: silver
:END:

- Your Silver badge task for this lesson is to follow the steps below to automate a home in Flowol.
- Open the *Automatic Home* mimic in Flowol, it looks like this:
[[./img/auto_home.png]]
1. Make the fan switch on automatically if the temperature in the room goes above 23°C.
2. Make the fire switch on automatically if the temperature in the room goes below 17°C.
3. Make the inside lamp switch on automatically if the light level (Sun) falls below 20.
4. Make the security light above the door turn on automatically if the light level (Sun) falls below 30 AND the security sensor is on.
5. Make the garage door open and close when the red Open and Close buttons are pressed.
[[./img/garage_extension.png]]

- If you get stuck on this task [[./img/home_flow1.png][click here]] for some help, but only if you're really stuck!
- When you have finished the task try it out by clicking the play button and interacting with your house to test that it works.
- Then screenshot your flowcharts and upload your work to the *Silver* badge task on *Week 6* of *Problem Solving* on Bourne to Learn.
- Before you move on make sure to save your Flowol work into your Computer Science/Year 8/Problem Solving folder as "Week 6 Selection Silver".

* Using Sensors to Select
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It - Sensors
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Sensors are used to measure physical quantities such as temperature, light, pressure, sound, and humidity. They send signals to the processor, processor is short for central processing unit (CPU). 
- For example:

  - A security alarm system may have an infrared in communications, an infrared beam modulates (switches on/off) to a receiver that interprets the modulations as data sensor which sends a signal when the beam is broken.
  - A heat sensitive sensor in the corner of a room may detect the presence of a person.
  - Temperature sensors could be used to control the heating in a large building.
  - Magnetic sensors are used to detect metal and can be placed in roads to monitor traffic flow.

- Other physical quantities that can be transmitted directly to the computer's processor include:

  - rainfall/water levels
  - radiation level
  - pH level
  - oxygen level

- In a smart home these sensors could look like this:

[[./img/smart_home.jpg]] 

** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: gold
:END:
*** Learning Strand: Algorithms
- Create a new Flowol file and choose the *Greenhouse* mimic.
- Follow the steps below:
  1. Create a flowchart to turn the Heater ON if the temperature is less than 10 and turn the Heater OFF if the temperature is greater than or equal 10.
  2. Create a flowchart to turn the Light ON when light from the Sun is less than 20 and turn the Light OFF when light from the Sun is greater than 50.
  3. Create a flowchart to turn the Sprinkler ON for 5 seconds if the low moisture sensor is ON.

- Test out your flowcharts by clicking the play button and changing the temperature and Sun values and make sure they work correctly. 
- Upload your completed *flowcharts* to www.bournetolearn.com, Week 6 Gold for Problem Solving.
** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: platinum
:END:
*** Learning Strand: Algorithms

- You now need to create some subroutines to seperate your flowcharts into seperate tasks.
- We've used subroutines before in Python, we made them by using the *def* keyword.
- We also looked at them in the *Week 4 - Breaking it Down Platinum task*. Have a look there if you need help on creating a subroutine.
- Your tasks are:
  1. Create a subroutine flowchart to OPEN the Window.
  2. Create a subroutine flowchart to CLOSE the Window.
  3. Create a subroutine flowchart to OPEN the Window when the temperature is greater than 20 and CLOSE the Window when the temperature is less than 20.

- Test out your flowcharts by clicking the play button and changing the temperature and Sun values and make sure they work correctly. 
- Upload your completed *flowcharts* to www.bournetolearn.com, Week 6 Platinum for Problem Solving.
