#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil html-style:nil 

#+TITLE: Sequence and Abstraction
#+AUTHOR: Xiaohui Ellis

#+BEGIN_EXPORT html
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/digixc/8-CS-ProblemSolving">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>

      <li><a href="homework.html">Homework</a></li>

    </ul>
  </div>
<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>
#+END_EXPORT
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:
* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing *Algorithms* learning strand, specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
+ develop problem solving skills by *decomposition*
+ learn how to represent *algorithms* using *flowchart*
+ learn how to represent *algorithms* using *pseudo-code*
+ Understand how *abstraction* can help solving complex problems
** Developing *Programming and Development* learning strand, specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
+ implement solutions using *selection* and *repetition*
+ develop further understanding that programming bridges the gap between algorithmic solutions and computer
* Algorithms with Pseudo-code
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Pseudo-code is similar to plain English but in a structured to describe the specific steps involved to solve a problem.
- Although pseudo-code does not have a fixed syntax, it should contain a set of instructions that are easy to follow by using appropriate indentations and nested indentations.  
- The example below is the psuedoc-deo for an algorithm of guessing the number game before.

#+BEGIN_SRC 
generate a ramdom integer and store it in a variable A
Ask user for an input and store in a variable B
if B > A:
   output "Too high"
if B<A:
   output "Too low"
if B=A:
   output "You guessed it"

#+END_SRC
- Here is another version of the same algorithm written in different psuedo-code. 
#+BEGIN_SRC 
A= a ramdom integer
output "Please guess a number"
B = user input
if B > A:
   output "Too high"
if B<A:
   output "Too low"
if B=A:
   output "You guessed it"
#+END_SRC

** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: gold
:END:
*** Learning Strand: Algorithms
- We all know the game of rock, paper, scissors.
- Try to decompose the game into smaller steps.
- Create an algorithm in psuedo-code for this game and upload.

* Abstraction
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Abstraction is one of the four cornerstones of Computer Science. It involves filtering out â€“ essentially, ignoring - the characteristics that we don't need in order to concentrate on those that we do. For example, in the guess the number game, we filtered out the detail on how the computer picks a random number.
- By leavinng out the unneeded information, we can focus on what is essential to solve the problem.
- It is part of computational thinking which allows us to look at a problem in ways which are easier to deal with.
- Watch the following video showing how abstraction was used to create improved versions of the London Underground Tube Map. Keep notes of what information was kept or removed from the London Tube Map.
#+BEGIN_HTML
<iframe width="560" height="315" src="https://www.youtube.com/embed/Bg3pfUqdLp4" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen></iframe>
#+END_HTML
** Badge It - Literacy
:PROPERTIES:
:HTML_CONTAINER_CLASS: literacy
:END:
*** Learning Strand: Literacy
- Upload your notes of what information was kept or removed from the London Tube Map.
- Using the software of your choice to create a User Guide on how to decompose a problem, including an example.

** Badge It - platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: platinum
:END:
*** Learning Strand: Programming and Development
1. We have used flowchart to present a solution on checking if a number is even or odd.
2. We also used psuedo-code to present a solution on guessing the number game.
- To gain this badge, you need to implement a solution using Python to *one* of the two problems.
*hints*:
- for problem 1, you need to know [[https://www.bournetocode.com/projects/CS-PythonKeySkills/pages/1_Part.html#sec-1-7][how to tell if a number is even or odd]]
- for problem 2. you need to know [[https://www.bournetocode.com/projects/CS-PythonKeySkills/pages/1_Part.html#sec-1-6][how to use a random module in Python to generate random number.]]
