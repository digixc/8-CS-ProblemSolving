#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:AUTHOR num:1 creator:AUTHOR timestamp:nil toc:nil html-style:nil html-postamble:nil
#+TITLE:Computational Thinking
#+AUTHOR: X Ellis

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/digixc/8-CS-ProblemSolving">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></>
      <li><a href="assessment.html">Assessment</a></li>

    </ul>
  </div>
<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>

#+END_HTML
* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END

* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing *Algorithms* learning strand, specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- be able to understand and articulate a given problem
- be able to develop algorithms for given problems
- understand that algorithms are implemented on digital devices as programs. 
- design simple algorithms using loops (repetition), and selection (if statement)
* Computational Thinking
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It 
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END: 
- Lets recap:
  - *Computational thinking* is the thought processes of understanding a problem and presenting its solution(s) in such a way that a computer or human can understand and a computer can effectively carry out.
- Lets break down the concept above:
  1. understanding the problem
  2. presenting the solutions so a computer can carry out or a human can understand
  3. A computer carries out the solution means it can produce solutions by running programs/softare based on the solutions given/presented in some programming languages
** Try It 
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END: 
- Lets consider the following sequence of numbers.  The problem to be solved is to find the largest number:
#+BEGIN_SRC 
10 12 8 9 6 15 20 14

#+END_SRC
=Step 1=: understanding the problem.  This is very important step.  We need to know what exactly the problem is.  In this case, 
   + to find the largest number from the given sequence

=Step 2=:  presenting the solution so a computer or human can understand. 
     1. What does it mean by *presenting the problem*?   
        - This means describing the problem in some fashion. For a human to understand, we can use text or diagram. 
        - The following is a solution to the finding the largest number problem described in plain but structured English:
         #+BEGIN_SRC 
  1  Start from the first number in the list
  2       
  3  if the first number is larger or equal to the next number
  4      make the first number the largest number
  5  else
  6      make the next number the largest number
  7  Move to the next number
  8  Repeat the steps 3 to 7 until all the number in the list is compared
  9  Output the largest number 

         #+END_SRC
       *But*
     2. How to present the solution so a computer can understand? This is where computer programming languages come to play.
     3. Humans use programming languages to present/describe the solution to a computer. This is called =implementation of the solution= in programming language.
        1. The following is the implemented solution using Python.


=Step 3=: Computers follow the instructions from the solution presented to carry out solving the problem. Run the program below and see if the solution works.  
#+BEGIN_HTML


<iframe src="https://trinket.io/embed/python/b885a94dd4" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>


#+END_HTML

* Algorithmic Thinking in Computational Thinking
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END: 

** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END: 
- In the previous *finding the largest number problem*, we have learned 3 equally important aspects of problem solving in computing:
  1. understanding the problem
  2. describeing/presenting the solution so a human or a computer can understand
  3. implementing the problem using programming language
 
- Lets focus on the step 2: describe/present the solution so a computer/human can understand. We did this by using a sequence of text or plain English but with some structure to make the solution easier for a human to follow.
- A solution given in step by step instructions is called an *algorithm*. 
- *Algorithmic thinking* is to have a solution to a problem, and the solution is such that it can be described in *a sequence of instructions*.
- If we have an algorithm, then we can write a program to do it.
- Computer programs are just algorithms written out in a programming language so computers can understand.
** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END: 
- Now, lets apply *computational thinking* to a simple problem and try to work out step by step.
  #+BEGIN_SRC 
  Given a sequence of numbers: 45 67 -9 12 -92 -10 44
  Find all positive numbers in the given sequence
  #+END_SRC
- Try to work out the following by yourself:
  1. understanding the problem.
  2. using *algorithmic thinking*, and plain but structured English to present a solution to the given problem so your peers can understand.
  3. try to implement the solution you created in step 2 in Python. To implement it, you need:
     + [[https://www.bournetocode.com/projects/CS-PythonKeySkills/pages/1_Part.html#sec-1-3][create a list]] to hold the numbers
     + use a loop ([[https://www.bournetocode.com/projects/CS-PythonKeySkills/pages/2_Part.html#sec-1-1][for or while loop]]) to go through the list
     + use [[https://www.bournetocode.com/projects/CS-PythonKeySkills/pages/1_Part.html#sec-1-2][if statement]] to decide if a number is positive or not 
  4. run the Python program to see if it works.
** Badge It - Silver
:PROPERTIES:
:HTML_CONTAINER_CLASS: silver
:END:
*** learning strand: *Algorithms*
- Upload your written understanding of the above given problem in plain English to www.bournetolearn.com. Your work must include your understanding of positive numbers.
** Badge It - Gold
:PROPERTIES:
:HTML_CONTAINER_CLASS: gold
:END:
*** learning strand: *Algorithms*
- Your solution (algorithm) to the problem above in structured English. Upload your work to www.bournetolearn.com. 
- Your algorithm should meet the criteria that it can be understood by a human or for a human to follow to find all positive numbers in a list.
** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: platinum
:END:
*** learning strand: *Algorithms*
- Screenshot of your implemented working solution in Python and upload to www.bournetolearn.com

