#+STARTUP:indent
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/styles.css"/>
#+HTML_HEAD_EXTRA: <link href='http://fonts.googleapis.com/css?family=Ubuntu+Mono|Ubuntu' rel='stylesheet' type='text/css'>
#+HTML_HEAD_EXTRA: <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js" type="text/javascript"></script>
#+HTML_HEAD_EXTRA: <script src="js/navbar.js" type="text/javascript"></script>
#+OPTIONS: f:nil author:nil num:1 creator:nil timestamp:nil toc:nil html-style:nil

#+TITLE: Problem Solving
#+AUTHOR: X Ellis

#+BEGIN_HTML
  <div class="github-fork-ribbon-wrapper left">
    <div class="github-fork-ribbon">
      <a href="https://github.com/digixc/8-CS-ProblemSolving">Fork me on GitHub</a>
    </div>
  </div>
<div id="stickyribbon">
    <ul>
      <li><a href="1_Lesson.html">Week1</a></li>
      <li><a href="2_Lesson.html">Week2</a></li>
      <li><a href="3_Lesson.html">Week3</a></li>
      <li><a href="4_Lesson.html">Week4</a></li>
      <li><a href="5_Lesson.html">Week5</a></li>
      <li><a href="6_Lesson.html">Week6</a></li>

      <li><a href="assessment.html">Assessment</a></li>

    </ul>
  </div>
<div id="underlay" onclick="underlayoff()">
</div>
<div id="overlay" onclick="overlayoff()">
</div>
<div id=overlayMenu>
<p onclick="overlayon('hsla(0, 0%, 50%, 0.5)')">Grey overlay</p>
<p onclick="underlayon('hsla(300,100%,50%, 0.3)')">Pink</p>
<p onclick="underlayon('hsla(80, 90%, 40%, 0.4)')">Green</p>
<p onclick="underlayon('hsla(240,100%,50%,0.2)')">Blue</p>
<p onclick="underlayon('hsla(40,100%,50%,0.3)')">Cream</p>
<p onclick="underlayon('hsla(300,100%,40%,0.3)')">Liliac</p>
<p onclick="underlayon('hsla(300,100%,25%,0.3)')">Purple</p>
<p onclick="underlayon('hsla(60,100%,50%,0.3)')">Yellow</p>
</div>
#+END_HTML

* COMMENT Use as a template
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:

** Research It
:PROPERTIES:
:HTML_CONTAINER_CLASS: research
:END:

** Design It
:PROPERTIES:
:HTML_CONTAINER_CLASS: design
:END:

** Build It
:PROPERTIES:
:HTML_CONTAINER_CLASS: build
:END:

** Test It
:PROPERTIES:
:HTML_CONTAINER_CLASS: test
:END:

** Run It
:PROPERTIES:
:HTML_CONTAINER_CLASS: run
:END:

** Document It
:PROPERTIES:
:HTML_CONTAINER_CLASS: document
:END:

** Code It
:PROPERTIES:
:HTML_CONTAINER_CLASS: code
:END:

** Program It
:PROPERTIES:
:HTML_CONTAINER_CLASS: program
:END:

** Try It
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

** Badge It
:PROPERTIES:
:HTML_CONTAINER_CLASS: badge
:END:

** Save It
:PROPERTIES:
:HTML_CONTAINER_CLASS: save
:END:
* Objectives
:PROPERTIES:
:HTML_CONTAINER_CLASS: objectives
:END:
** Developing *Programming and Development* learning strand, specifically:
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- further develop problems solving skills by applying the following:
+ *pattern recognition*
+ *algorithmic thinking*
- futher develop *programming skills* by implementing working solutions using *selection*, and *repetition* 
- appreciate the need for, and writes, *custom functions* including use of parameters
* Put Everything Together to Solve Problems
:PROPERTIES:
:HTML_CONTAINER_CLASS: activity
:END:
** Learn It
:PROPERTIES:
:HTML_CONTAINER_CLASS: learn
:END:
- Lets recap:
  - *Computational thinking* is the thought processes of understanding a problem and presenting its solution(s) in such a way that a computer or human can understand and a computer can effectively carry out.

- Solving a problem involves:
  - Understand the problem
  - breakdown the problem into smaller problems - *decomposition*
  - Focus on important details to reach a solution - *Abstraction*
  - Look for similarities - *Pattern Recognition*
  - Create a step by step instructions to solve the problem - *algorithm*

-It is easier to spot patterns in pictures than in numbers. Lets use the following image as an example for us to learn the whole process of *problem solving*.
- The problem for you is to create the same image using Python's turtle module.
#+BEGIN_HTML
<img src='./img/turtleFlower.png' width=40% height=40%>
#+END_HTML


- Steps:
  1. What smaller part of the problem can you identify? 
  2. Are there any patterns? What are the patterns?
  3. Not to concern yourself with how to pick the colours and and fill the shapes yet - just focus on the important part of the task for now.
  4. Can you use any one of the three methods, psuedo-code, structured English and flowchart to describe your algorithms?

- Hopefully you have identified the following:
  1. The image is made up by solid circles
  2. The blue circles are evenly distributed - a pattern
  3. If you can make a circle using Python turtle module first, then ....
** Try It - Decomposing: solving the smaller tasks first
:PROPERTIES:
:HTML_CONTAINER_CLASS: try
:END:

- So, lets try to make one circle first.
- From our term 1 turtle unit, we have learned that a turtle needs to move and turn at an angle in order to come back where the turtle started.
- To draw a circle, in order to calculate how much to turn and move, we need to know the circle's radius.  
- Lets store this radius in a variable called R. R can be any number depending on the size of the circle.
- If we want the turtle to move in 360 steps, then each step should be the circle's circumference divided by 360 and the turning angle should be 360^o/360 = 1^o
#+BEGIN_SRC 
a circle's circumference is calculates as following:
      2*R*3.14    where 3.14 is pi, R is the radius

#+END_SRC
- If we want the turtle to move in less steps, say in 180 steps, then each step should be the circle's circumference divided by 180 and the turning angle should be 360^o/180 = 2^o
- If we can create a function called circle, then we can use it again later for all the circles in the image.
- The following code in the trinket can draw one filled circle with radius 40. Can you try to create a circle function with the radius as a parameter so that function can be called to create circles with any radius?
#+BEGIN_HTML
<iframe src="https://trinket.io/embed/python/27eb6bd59b" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
#+END_HTML
** Badge It - Circle function
:PROPERTIES:
:HTML_CONTAINER_CLASS: silver
:END:
*** Learning Strand: Programming and Development
- Use the code given above, create a circle function with the radius as a parameter so that function can be called to create circles with any radius.
- You must test your solution by calling the function. Upload your solution. Your function should begin with :
#+BEGIN_SRC python
def circle(radius):
    your code goes here!

#+END_SRC
** Badge It - Blossom
:PROPERTIES:
:HTML_CONTAINER_CLASS: gold
:END:
*** Learning Strand: Programming and Development
- Work in pair, use psuedo-code, or structured English or flowchart to descibe the algorithm to produce the complete flower.
- Implement your algorithm in Python by starting off your finished Silver code.
- upload your algorithm and Python code.


** Badge It - Platinum
:PROPERTIES:
:HTML_CONTAINER_CLASS: platinum
:END:
*** Learning Strand: Programming and Development
- Take look at the following image.
#+BEGIN_HTML
<img src="./img/turtleCircles.png" width=200 height=200>
#+END_HTML
- Identify the pattern and finished the implementation by using the basic code below.

#+BEGIN_HTML

<iframe src="https://trinket.io/embed/python/d89a17c650" width="100%" height="600" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen></iframe>
#+END_HTML
